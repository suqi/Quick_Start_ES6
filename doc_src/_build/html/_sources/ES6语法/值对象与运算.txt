
# 值对象

Js是动态弱类型语言,值只有那么几种类型:

Js内置类型大概就这么7种:

+ Number    数值型
+ String    字符串型
+ Bool      布尔型
+ null      空值类型
+ undefined 未定义类型
+ object    对象类型
+ Symbol    标志位类型

我们可以用typeof函数来辨识一个值得类型,不过值得注意的是`function`也是typeof的一种可能的返回值.然而function是object



```javascript
typeof(()=>{
    return 1
})
```




    'function'



## Number


```javascript
123 // 整数123
0.456 // 浮点数0.456
1.2345e3// 科学计数法表示1.2345x1000，等同于1234.5
-99// 负数
NaN // NaN表示Not a Number，当无法计算结果时用NaN表示,NaN这个特殊的Number与所有其他值都不相等，包括它自己
Infinity // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity
0b111110111 //二进制数
0o767     //八进制数
0xfa223   //16进制数
```




    1024547



### Number类型的坑:

+ ** 浮点数计算**


```javascript
0.1+0.2 == 0.3
```




    false



注意,这是因为我们的浮点数并没有设定精度,大家肯定都觉得本该是true呀,其实本来就该是错的(IEEE 754),浮点数必须有精度!一个解决方案是全部化成整数在算,另一呢...js就别做计算了吧

+ ** NaN**

它表示不是一个数...但他自己确是数值类型,而且NaN不等于NaN...很矛盾哇


```javascript
typeof(NaN)
```




    'number'




```javascript
0 == NaN
```




    false




```javascript
parseInt("asdf") 
```




    NaN




```javascript
NaN === NaN
```




    false



所以如果你要判断一个变量是不是NaN你得使用函数:

    isNaN("xxx")


```javascript
isNaN("xxx")
```




    true



+ Infinity

和NaN类似,要检查一个值是否***非无穷***可以使用函数isFinite()


```javascript
isFinite(Infinity)
```




    false




```javascript
isFinite(15)
```




    true



#### ES6中的新方法和属性

+ Number.isFinite()  

    与isFinite()的区别在于，传统方法先调用Number()将非数值的值转为数值，再进行判断，这个新方法只对数值有效，非数值一律返回false。
    
+ Number.isNaN()     

    与isNaN()的区别在于，传统方法先调用Number()将非数值的值转为数值，再进行判断，这个新方法只对数值有效，非数值一律返回false。
    
+ Number.isInteger() 

    用来判断一个值是否为整数。需要注意的是，在JavaScript内部，整数和浮点数是同样的储存方法，所以3和3.0被视为同一个值。

+ Number.EPSILON/Number.EPSILON.toFixed(20)     

    极小的常量Number.EPSILON,引入一个这么小的量的目的，在于为浮点数计算，设置一个误差范围。我们知道浮点数计算是不精确的。但是如果这个误差能够小于Number.EPSILON，我们就可以认为得到了正确结果。因此，Number.EPSILON的实质是一个可以接受的误差范围。
    
+ 安全整数Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER和Number.isSafeInteger()
JavaScript能够准确表示的整数范围在-2^53到2^53之间（不含两个端点），超过这个范围，无法精确表示这个值。Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER这两个常量，用来表示这个范围的上下限。`Number.isSafeInteger()`则是用来判断一个整数是否落在这个范围之内。


```javascript
console.log(Number.isInteger(25)) // true
console.log(Number.isInteger(25.0)) // true
console.log(Number.isInteger(25.1)) // false
```

    true
    true
    false





    undefined




```javascript
(0.1 + 0.2 - 0.3).toFixed(20)
```




    '0.00000000000000005551'




```javascript
(0.1 + 0.2 - 0.3) < Number.EPSILON
```




    true



### 数值运算和Math对象

js默认提供了多种通用的运算符用来做数值运算

运算符|意义
---|---
+|加法
-|减法
\*|乘法
/|除法
%|求余
\*\*|乘方

并且提供了赋值运算:

运算符|意义
---|---
=|赋值
+=|自己加上后一个数
-=|自己减去后一个数
\*=|自己乘后一个数
/=|自己除后一个数
%=|自己与后一个数求余

Math对象类似python的标准库math,提供了一些不太常用的基本数值计算方法和通用的常数

常数:

属性|	描述
---|---
E	|返回算术常量 e，即自然对数的底数（约等于2.718）。
LN2	|返回 2 的自然对数（约等于0.693）。
LN10	|返回 10 的自然对数（约等于2.302）。
LOG2E	|返回以 2 为底的 e 的对数（约等于 1.414）。
LOG10E|	返回以 10 为底的 e 的对数（约等于0.434）。
PI	|返回圆周率（约等于3.14159）。
SQRT1_2	|返回返回 2 的平方根的倒数（约等于 0.707）。
SQRT2	|返回 2 的平方根（约等于 1.414）。

方法:

方法|	描述
---|---
random()|	返回 0 ~ 1 之间的随机数。
fround(x)|方法返回一个数的单精度浮点数形式。
round(x)	|把数四舍五入为最接近的整数。
trunc(x)|方法用于去除一个数的小数部分，返回整数部分
abs(x)	|返回数的绝对值。
sign(x)|方法用来判断一个数到底是正数、负数、还是零。它会返回五种值。<br>参数为正数，返回+1；<br>参数为负数，返回-1；<br>参数为0，返回0；<br>参数为-0，返回-0;<br>其他值，返回NaN。
ceil(x)|	对数进行上舍入。
floor(x)	|对数进行下舍入。
max(x,y)	|返回 x 和 y 中的最高值。
min(x,y)	|返回 x 和 y 中的最低值。
cos(x)	|返回数的余弦。
sin(x)|	返回数的正弦。
tan(x)	|返回角的正切。
acos(x)|	返回数的反余弦值。
asin(x)|	返回数的反正弦值。
atan(x)|	以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值。
atan2(y,x)|	返回从 x 轴到点 (x,y) 的角度（介于 -PI/2 与 PI/2 弧度之间）。
sinh(x)| 返回x的双曲正弦（hyperbolic sine）
cosh(x) |返回x的双曲余弦（hyperbolic cosine）
tanh(x) |返回x的双曲正切（hyperbolic tangent）
asinh(x) |返回x的反双曲正弦（inverse hyperbolic sine）
acosh(x) |返回x的反双曲余弦（inverse hyperbolic cosine）
atanh(x) |返回x的反双曲正切（inverse hyperbolic tangent）
pow(x,y)	|返回 x 的 y 次幂。
sqrt(x)|	返回数的平方根。
hypot(...args)|方法返回所有参数的平方和的平方根
cbrt(x)|方法用于计算一个数的立方根
exp(x)	|返回 e 的指数。
log(x)	|返回数的自然对数（底为e）。
expm1(x)|返回Math.exp(x) - 1
log1p(x)|方法返回1 + x的自然对数，即Math.log(1 + x)。如果x小于-1，返回NaN。
log10(x)|返回以10为底的x的对数。如果x小于0，则返回NaN
log2(x)|返回以2为底的x的对数。如果x小于0，则返回NaN。
clz32(x)|返回一个数的32位无符号整数形式有多少个前导0。
imul(x,y)|方法返回两个数以32位带符号整数形式相乘的结果，返回的也是一个32位的带符号整数。
toSource()	|返回该对象的源代码。[兼容性]
valueOf()	|返回 Math 对象的原始值。

### 类型转换

Number()函数,将一个值转变为10进制数值类型

虽然js早期版本提供了Number(),parseInt()和parseFloat()三种用来将对象值转换为数值类型的方法,但因为

+ 为了好记
+ 为了与python统一记
+ 适应ES6中没有后两种全局方法,而是在Number对象中新增了同名方法

我们就只搞第一个

`Number()`的转换特点如下:

+ 布尔值       true变成1,false变成0
+ 数值型       原来是啥还是啥
+ null        变成0
+ undefined   NaN
+ 字符串
    + 只包含数字(包括前面有正负号的情况)    去掉前置的0转换成十进制整数
    + 包括`.`符号,其他都是数              去掉前置的0转换成十进制浮点数数
    + 包含`0xf`,`0b和0x`字样            作为16进制数转换成10进制数
    + 空字符串                          0
    + 包括其他的字符                     NaN
+ 对象         调用valueOf()方法再转值,没有的话再试toString()方法
+ Symbol      babel-node直接报错`TypeError`


```javascript
Number("1.23")
```




    1.23




```javascript
Number(Symbol())
```


    TypeError: Cannot convert a Symbol value to a number

        at Number (native)

        at evalmachine.<anonymous>:3:1

        at Object.exports.runInThisContext (vm.js:54:17)

        at run ([eval]:192:19)

        at onMessage ([eval]:63:41)

        at emitTwo (events.js:87:13)

        at process.emit (events.js:172:7)

        at handleMessage (internal/child_process.js:686:10)

        at Pipe.channel.onread (internal/child_process.js:440:11)


## 字符串

字符串是以单引号'或双引号"括起来的任意文本，比如'abc'，"xyz"等等。请注意，''或""本身只是一种表示方式，不是字符串的一部分，因此，字符串'abc'只有a，b，c这3个字符。

和python中一样,js的字符串也是不可变值

字符串对象的默认属性和方法:

属性	|描述
---|---
length	|字符串的长度

字符串的运算符:

运算符|描述
---|---
+|字符串连接

字符串对象方法:

方法	|描述
---|---
anchor(anchorname)	|创建 HTML 锚。
big()	|用大号字体显示字符串。
small()	|使用小字号来显示字符串。
blink()	|显示闪动字符串。
bold()	|使用粗体显示字符串。
italics()	|使用斜体显示字符串。
fixed()	|以打字机文本显示字符串。
strike()|	使用删除线来显示字符串。
sub()	|把字符串显示为下标。
sup()	|把字符串显示为上标。
toLocaleLowerCase()	|把字符串转换为小写。
toLocaleUpperCase()|把字符串转换为大写。
toLowerCase()	|把字符串转换为小写。
toUpperCase()	|把字符串转换为大写。
toSource()	|代表对象的源代码。[兼容性]
toString()	|返回字符串。
valueOf()	|返回某个字符串对象的原始值。
fontcolor(color)	|使用指定的颜色来显示字符串。
fontsize(size)	|使用指定的尺寸来显示字符串。
lastIndexOf(searchvalue [,fromindex])	|从后向前搜索字符串。
link(url)	|将字符串显示为链接。
localeCompare(target)	|用本地特定的顺序来比较两个字符串。
match(searchvalue/regexp)	|找到一个或多个正则表达式的匹配。
replace(regexp/substr,replacement)	|替换与正则表达式匹配的子串。
search(regexp)	|检索与正则表达式相匹配的值。
slice(start,end)|	提取字符串的片断，并在新的字符串中返回被提取的部分。
concat(stringX,stringX,...,stringX)	|连接字符串。
split(separator[,howmany])	|把字符串分割为字符串数组。howmany可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。
substr(start[,length])	|从起始索引号提取字符串中指定数目的字符。length参数表示子串中的字符数。必须是数值。如果省略了该参数，那么返回从 stringObject 的开始位置到结尾的字串
substring(start[,stop])|	提取字符串中两个指定的索引号之间的字符。stop参数比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。
codePointAt(index)|返回在指定的位置的字符的 Unicode 编码
repeat(n)|返回字符串重复n次的字符串
includes(searchvalue [,fromindex])|返回布尔值，表示是否找到了参数字符串。
startsWith(searchvalue [,fromindex])|返回布尔值，表示参数字符串是否在源字符串的头部
endsWith(searchvalue [,fromindex])|返回布尔值，表示参数字符串是否在源字符串的尾部。
indexOf(searchvalue [,fromindex])|返回某个指定的字符串值在字符串中首次出现的位置,不存在则返回-1

### unicode和utf-16编码支持

ES6允许采用`\u{xxxx}`形式表示一个字符，其中“xxxx”表示字符的码点


```javascript
'\u{1F680}'
```




    '🚀'



JavaScript内部，字符以UTF-16的格式储存，每个字符固定为2个字节。对于那些需要4个字节储存的字符（Unicode码点大于0xFFFF的字符），JavaScript会认为它们是两个字符。

codePointAt方法会正确返回32位的UTF-16字符的码点。对于那些两个字节储存的常规字符，它的返回结果与charCodeAt方法相同。

codePointAt方法返回的是码点的十进制值，如果想要十六进制的值，可以使用toString方法转换一下。

'𠮷'是一个典型的4字节存储字符,我们以它举例


```javascript
var s = '𠮷a'
s.codePointAt(0) // 134071

```




    134071




```javascript
s.codePointAt(1) // 57271
```




    57271




```javascript
s.codePointAt(2)
```




    97



同样的,要把一个4字节的utf-16字符从码点返回,我们可以用`String.fromCodePoint`,注意,这个是String对象的方法,不是字符串对象的


```javascript
String.fromCodePoint(0x20BB7)
```




    '𠮷'



### 字符串查找

可以用于字符串查找的方法有:

+ includes(searchvalue [,fromindex])
    
    返回布尔值，表示是否找到了参数字符串。
    
+ startsWith(searchvalue [,fromindex])

    返回布尔值，表示参数字符串是否在源字符串的头部

+ endsWith(searchvalue [,fromindex]) 

    返回布尔值，表示参数字符串是否在源字符串的尾部。

+ indexOf(searchvalue [,fromindex])

    返回某个指定的字符串值在字符串中首次出现的位置,不存在则返回-1
    
这四个方法都支持第二个参数，表示开始搜索的位置。使用第二个参数n时，endsWith的行为与其他两个方法有所不同。它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。




```javascript
var s = 'Hello world!';

console.log(s.startsWith('world', 6)) // true
console.log(s.endsWith('Hello', 5)) // true
console.log(s.includes('Hello', 6)) // false
console.log(s.indexOf('llo'))
```

    true
    true
    false
    2





    undefined



### 重复字符串

repeat()方法可以返回一个由原字符串重复好几次的新字符串


```javascript
'ni'+'coni'.repeat(2)
```




    'niconiconi'



这个方法如果接收

+ 负数或者Infinity，

    会报错
    
+ 0到-1之间的小数,NaN

    等同于0
    
+ 字符串

    先转成数字再判断

### 模板字符串

不用再羡慕python中字符创的format()方法了,ES6中有了模板字符串,它使用\`\`包裹,使用`${varname}`表示占位字符,而并不需要再用format()这样的方法来做占位符的匹配,占位字符会自己与作用域中的变量匹配


```javascript
var temple = `${name}今年${age}岁啦 `
var name = "小亮"
var age = 27
```




    'use strict'




```javascript
temple
```




    '小亮今年27岁啦 '



如果模板字符串中的变量没有声明，将报错,如果要用模板本身,可以用包裹字符串的对象构建一个Fuction对象,来实现


```javascript
let str = 'return ' + '`Hello ${name}!`';
let func = new Function('name', str);
func('Jack')
```




    'Hello Jack!'




```javascript
function temple(name){
    return `hello ${name}!`
}
```




    'use strict'




```javascript
temple('jack')
```




    'hello jack!'



### 类型转换

类似number,把一个其他对象转换成字符串的方式是使用String()函数

它的规则是:

+ 有toString()则调用它
+ 值是null则返回"null"
+ 值是undefined则返回"undefined"

## 布尔值

布尔值只有true、false两种值，要么是true，要么是false，可以直接用true、false表示布尔值



```javascript
true
```




    true



和python类似,js也提供了大量的假值

假值| 类型
---|---
0|Number
NaN|Number
''|String
false|Boolean
null|Object
undefined|Undefined

这之外的值都是真值

## null

null表示一个“空”的值，它和0以及空字符串''不同，0是一个数值，''表示长度为0的字符串，而null表示“空”。

在其他语言中，也有类似JavaScript的null的表示，例如Java也用null，Swift用nil，Python用None表示。但是，在JavaScript中，还有一个和null类似的undefined，它表示“未定义”。

JavaScript的设计者希望用null表示一个空的值

**但注意**

typeof(null)返回的是object,只是因为事实上null应当表示一个空的对象指针.


```javascript
null
```




    null




```javascript
typeof(null)
```




    'object'



## undefined

undefined表示值未定义。它既是值得类型,也是这个类型唯一的值.事实证明，这并没有什么卵用。大多数情况下，我们都应该用null.undefined仅仅在判断函数参数是否传递的情况下有用.

##  object

这个比较特殊,object是特殊的默认类型,可以说除了其他外的所有对象都是object类型.对象是引用类型，如果变量x表示一个对象，当执行var y = x;语句后，实际上y和x指向的是同一个对象。所以，当你通过y改变对象的值，这种变化也会反映到x上。

在js中对象很容易创建,只要使用大括号,像python中写字典一样就行了


```javascript
typeof({})
```




    'object'



就像python中的运算符一样,每个object都有几个对应的方法和属性,后面会详细讲

在后面面向对象的部分我们会详细解析Object对象

## symbol(参考自ECMAScript 6 入门一书)

这个是ES6新增的类型,作用就一个,给一个对象做个唯一标识.

JS中对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是ES6引入Symbol的原因。

Symbol值通过Symbol函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的Symbol类型。凡是属性名属于Symbol类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。


```javascript
typeof(Symbol())
```




    'symbol'



Symbol函数可以接受一个字符串作为参数，表示对Symbol实例的描述(可以理解为注释或者标签)，主要是为了在控制台显示，或者转为字符串时，比较容易区分。


```javascript
let s1 = Symbol("is s1")
```




    'use strict'




```javascript
let s2 = Symbol("is s2")
```




    'use strict'




```javascript
s1
```




    Symbol(is s1)




```javascript
s2
```




    Symbol(is s2)




```javascript
s1.toString()
```




    'Symbol(is s1)'




```javascript
s2.toString()
```




    'Symbol(is s2)'



上面代码中，s1和s2是两个Symbol值。如果不加参数，它们在控制台的输出都是Symbol()，不利于区分。有了参数以后，就等于为它们加上了描述，输出的时候就能够分清，到底是哪一个值。

**注意**，Symbol函数的参数只是表示对当前Symbol值的描述，因此相同参数的Symbol函数的返回值是不相等的。

Symbol值不能与其他类型的值进行运算，会报错。
但可以用`toString()`方法返回字符串,也可以用`Boolean()`函数或者作为判断表达式的内容转变为布尔值,它的意义是"存在"或者"非空"


```javascript
Boolean(s1)
```




    true




```javascript
if (s1){
    console.log("true")
}
```

    true





    undefined



Symbol的特点是不会重复,这样可以避免不小心重写覆盖,的主要用法:

+ 作为对象中的属性(在面向对象部分详细讲用法)
+ 作为常量

> 例1


```javascript
function log(level,msg){
    return console.log(level,msg)
}
log.levels = {
  DEBUG: Symbol('debug'),
  INFO: Symbol('info'),
  WARN: Symbol('warn'),
}
log(log.levels.DEBUG, 'debug message')
log(log.levels.INFO, 'info message')
```

    Symbol(debug) 'debug message'
    Symbol(info) 'info message'





    undefined



> 例2 


```javascript
const COLOR_RED    = Symbol("red");
const COLOR_GREEN  = Symbol("green");

function getComplement(color) {
  switch (color) {
    case COLOR_RED:
      return COLOR_GREEN;
    case COLOR_GREEN:
      return COLOR_RED;
    default:
      throw new Error('Undefined color');
    }
}
```




    'use strict'




```javascript
getComplement(COLOR_GREEN)
```




    Symbol(red)



常量使用Symbol值最大的好处，就是其他任何值都不可能有相同的值了，因此可以保证上面的switch语句会按设计的方式工作。

> 实例：消除魔术字符串

魔术字符串指的是，在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值。风格良好的代码，应该尽量消除魔术字符串，该由含义清晰的变量代替。


```javascript
function getArea(shape, options) {
  var area = 0

  switch (shape) {
    case 'Triangle': // 魔术字符串
      area = .5 * options.width * options.height;
      break
    /* ... more code ... */
  }

  return area
}

getArea('Triangle', { width: 100, height: 100 }) // 魔术字符串
```




    5000



上面代码中，字符串“Triangle”就是一个魔术字符串。它多次出现，与代码形成“强耦合”，不利于将来的修改和维护。

常用的消除魔术字符串的方法，就是把它写成一个变量。


```javascript
var shapeType = {
  triangle: 'Triangle'
}

function getArea(shape, options) {
  var area = 0
  switch (shape) {
    case shapeType.triangle:
      area = .5 * options.width * options.height
      break
  }
  return area
}

getArea(shapeType.triangle, { width: 100, height: 100 })

```




    5000



上面代码中，我们把“Triangle”写成shapeType对象的triangle属性，这样就消除了强耦合。

如果仔细分析，可以发现shapeType.triangle等于哪个值并不重要，只要确保不会跟其他shapeType属性的值冲突即可。因此，这里就很适合改用Symbol值。


```javascript
const shapeType = {
  triangle: Symbol()
}
function getArea(shape, options) {
  var area = 0
  switch (shape) {
    case shapeType.triangle:
      area = .5 * options.width * options.height
      break
  }
  return area
}

getArea(shapeType.triangle, { width: 100, height: 100 })

```




    5000



### Symbol.for()和Symbol.keyFor()

有时，我们希望重新使用同一个Symbol值，Symbol.for方法可以做到这一点。它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的Symbol值。如果有，就返回这个Symbol值，否则就新建并返回一个以该字符串为名称的Symbol值。


```javascript
var s1 = Symbol.for('foo');
var s2 = Symbol.for('foo');

s1 === s2 
```




    true



上面代码中，s1和s2都是Symbol值，但是它们都是同样参数的Symbol.for方法生成的，所以实际上是同一个值。

Symbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。Symbol.for()不会每次调用就返回一个新的Symbol类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。比如，如果你调用Symbol.for("cat")30次，每次都会返回同一个Symbol值，但是调用Symbol("cat")30次，会返回30个不同的Symbol值。


```javascript
Symbol.for("bar") === Symbol.for("bar")
```




    true




```javascript
Symbol("bar") === Symbol("bar")
```




    false



上面代码中，由于Symbol()写法没有登记机制，所以每次调用都会返回一个不同的值。

Symbol.keyFor方法返回一个已登记的Symbol类型值的key。


需要注意的是，Symbol.for为Symbol值登记的名字，是全局环境的，可以在不同的iframe或service worker中取到同一个值。

```javascript
iframe = document.createElement('iframe');
iframe.src = String(window.location);
document.body.appendChild(iframe);

iframe.contentWindow.Symbol.for('foo') === Symbol.for('foo')
// true
```
上面代码中，iframe窗口生成的Symbol值，可以在主页面得到。



### 除了定义自己使用的Symbol值以外，ES6还提供了11个内置的Symbol值，指向语言内部使用的方法。

#### Symbol.hasInstance

**babel未实现**

对象的`Symbol.hasInstance`属性，指向一个内部方法。当其他对象使用`instanceof`运算符，判断是否为该对象的实例时，会调用这个方法。比如，`foo instanceof Foo`在语言内部，实际调用的是`Foo[Symbol.hasInstance](foo)`

#### Symbol.isConcatSpreadable

**babel未实现**

对象的`Symbol.isConcatSpreadable`属性等于一个布尔值，表示该对象使用`Array.prototype.concat()`时，是否可以展开。

#### Symbol.species

**babel未实现**

对象的Symbol.species属性，指向一个方法。该对象作为构造函数创造实例时，会调用这个方法。即如果this.constructor[Symbol.species]存在，就会使用这个属性作为构造函数，来创造新的实例对象。

Symbol.species属性默认的读取器如下。

#### Symbol.match

**babel未实现**

对象的`Symbol.match`属性，指向一个函数。当执行`str.match(myObject)`时，如果该属性存在，会调用它，返回该方法的返回值。

#### Symbol.replace


**babel未实现**

对象的Symbol.replace属性，指向一个方法，当该对象被String.prototype.replace方法调用时，会返回该方法的返回值。

#### Symbol.search

**babel未实现**

对象的Symbol.search属性，指向一个方法，当该对象被String.prototype.search方法调用时，会返回该方法的返回值。

#### Symbol.split

**babel未实现**
对象的Symbol.split属性，指向一个方法，当该对象被String.prototype.split方法调用时，会返回该方法的返回值。

#### Symbol.iterator

**babel未实现**

对象的Symbol.iterator属性，指向该对象的默认遍历器方法，即该对象进行for...of循环时，会调用这个方法，返回该对象的默认遍历器，详细介绍参见《Iterator和for...of循环》一章。




#### Symbol.toPrimitive

**babel未实现**

对象的Symbol.toPrimitive属性，指向一个方法。该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。

Symbol.toPrimitive被调用时，会接受一个字符串参数，表示当前运算的模式，一共有三种模式。

Number：该场合需要转成数值
String：该场合需要转成字符串
Default：该场合可以转成数值，也可以转成字符串



#### Symbol.toStringTag

**babel未实现**

对象的Symbol.toStringTag属性，指向一个方法。在该对象上面调用Object.prototype.toString方法时，如果这个属性存在，它的返回值会出现在toString方法返回的字符串之中，表示对象的类型。也就是说，这个属性可以用来定制[object Object]或[object Array]中object后面的那个字符串。


ES6新增内置对象的Symbol.toStringTag属性值如下。

+ JSON[Symbol.toStringTag]：'JSON'
+ Math[Symbol.toStringTag]：'Math'
+ Module对象M[Symbol.toStringTag]：'Module'
+ ArrayBuffer.prototype[Symbol.toStringTag]：'ArrayBuffer'
+ DataView.prototype[Symbol.toStringTag]：'DataView'
+ Map.prototype[Symbol.toStringTag]：'Map'
+ Promise.prototype[Symbol.toStringTag]：'Promise'
+ Set.prototype[Symbol.toStringTag]：'Set'
+ %TypedArray%.prototype[Symbol.toStringTag]：'Uint8Array'等
+ WeakMap.prototype[Symbol.toStringTag]：'WeakMap'
+ WeakSet.prototype[Symbol.toStringTag]：'WeakSet'
+ %MapIteratorPrototype%[Symbol.toStringTag]：'Map Iterator'
+ %SetIteratorPrototype%[Symbol.toStringTag]：'Set Iterator'
+ %StringIteratorPrototype%[Symbol.toStringTag]：'String Iterator'
+ Symbol.prototype[Symbol.toStringTag]：'Symbol'
+ Generator.prototype[Symbol.toStringTag]：'Generator'
+ GeneratorFunction.prototype[Symbol.toStringTag]：'GeneratorFunction'

#### Symbol.unscopables

**babel未实现**

对象的Symbol.unscopables属性，指向一个对象。该对象指定了使用with关键字时，哪些属性会被with环境排除。

## 局部变量和全局变量--变量的作用域

js的作用域基本可以分为这么几块:

+ 全局变量(无包裹)
+ 局部变量(被函数包裹)
+ 块级变量(被{}包裹)

而声明变量的关键字有三个:

关键字|说明
---|---
变量 var  |     在Js中用`var`定义的变量是局部变量,而不用`var`则是全局变量(不建议不加声明)
不可变量 const  |  const是不变量,也就是常说的常量,类似scala的val,一旦赋值就不可变
块级作用域  let |变量在ES6中新增了命令let,它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。let并不支持变量提升,当然了我也不支持,变量本来就因该先声明再操作.



```javascript
let Pi=3.14
```




    'use strict'




```javascript
function round(r){
    var R = r
    return Pi*R*R
}
```




    'use strict'




```javascript
round(2)
```




    12.56




```javascript
R//R是局域变量,
```


    ReferenceError: R is not defined

        at evalmachine.<anonymous>:3:1

        at Object.exports.runInThisContext (vm.js:54:17)

        at run ([eval]:192:19)

        at onMessage ([eval]:63:41)

        at emitTwo (events.js:87:13)

        at process.emit (events.js:172:7)

        at handleMessage (internal/child_process.js:686:10)

        at Pipe.channel.onread (internal/child_process.js:440:11)

