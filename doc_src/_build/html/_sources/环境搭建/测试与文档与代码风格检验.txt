
# 代码风格检验

Javascript作为动态语言,它本身并没有类型检验,因此需要一个工具来做语法检验从而减少出错,这个工具就是[`eslint`](https://github.com/eslint/eslint/)

安装不多说了

    npm install eslint --save-dev

## 使用

1. 配置

使用`node_modules/.bin/eslint --init`命令,回答一系列问题后就会创建一个配置文件`.eslintrc.json`文件,修改之

```javascript

    "env": {
        "browser": true,
        "es6": true
    },
    "extends": "eslint:recommended",
    "parser": "babel-eslint",
    "parserOptions": {
        "ecmaFeatures": {
            "experimentalObjectRestSpread": true,
            "jsx": true
        },
        "sourceType": "module"
    },
    "plugins": [
        "react"
    ],
    "rules": {
        "indent": [
            "error",
            4
        ],
        "linebreak-style": [
            "error",
            "unix"
        ],
        "quotes": [
            "error",
            "double"
        ],
        "semi": [
            "error",
            "never"
        ]
    }
}
```
之后就可以使用了

使用:

    node_modules/.bin/eslint frompath topath


# api文档自动生成

python可以使用段注释自动的生成文档,但js不行,必须借助第三方工具实现,这个工具就是`esdoc`

安装依然是

```shell
npm install esdoc --save-dev
```

之后使用我们看个例子

>例1: 用esdoc生成api文档并输出html文档

1. js文件:

```javascript
/**
 * this is MyClass.
 */
export default class MyClass {
  /**
   * @param {number} param this is param.
   * @return {number} this is return.
   */
  method(param){}
}

```

看注释,使用

```javascript
/**
*
*/
```

包裹的注释可以成为文档,其中使用@开头的行会被辨识为是有特殊意义的标签

所有的标签说明可以在[官网](https://esdoc.org/tags.html)找到

需要注意的是:

```
@param {number} param this is param.
```

代表输入的形参属性,要有几个参数写几个,按顺序写,`{number}`表示类型,`param`是形参名 后面的是说明

2. 写配置`esdoc.json`

```javascript
{
  "source": "./js/src",//源文件位置
  "destination": "./esdoc",//生成文档目标文件夹
  "coverage": true//是否统计覆盖率
}

```


3. 使用

    esdoc -c ./esdoc.json

# 断言

js并没有断言语句,我们可以使用[chai](http://chaijs.com/)来实现断言功能

安装依然是npm安装

    npm install chai --save-dev

chai有三种断言风格

+ Assert风格

    类似python中的assert语句
    
    ```javascript
    var assert = chai.assert

    assert.typeOf(foo, 'string')
    assert.equal(foo, 'bar')
    assert.lengthOf(foo, 3)
    assert.property(tea, 'flavors')
    assert.lengthOf(tea.flavors, 3)
    ```
    这种风格代码最保守,我比较习惯用
    
+ Expect

    推断方法,相对更加接近口语化,英语看来就是"我推测xxx是ooo"这样
    
    ```javascript
    var expect = chai.expect

    expect(foo).to.be.a('string')
    expect(foo).to.equal('bar')
    expect(foo).to.have.length(3)
    expect(tea).to.have.property('flavors').with.length(3)
    ```
    这种风格比较中庸,好像是最受欢迎的一种
    
+ Should
    
    最口语化得一种风格,意识是"xxx应该是ooo"
    
    ```javascript
    chai.should()

    foo.should.be.a('string')
    foo.should.equal('bar')
    foo.should.have.length(3)
    tea.should.have.property('flavors').with.length(3)
    ```
    这种风格不建议用,会修改原型

# 测试框架

做代码测试可以使用[mocha](http://mochajs.org/)来做, 


安装依然是npm

    npm install mocha --save-dev
    
## 使用:


写测试代码:

```javascript
var assert = require('chai').assert
describe('Array', function() {
  describe('#indexOf()', function () {
    it('should return -1 when the value is not present', function () {
      assert.equal(-1, [1,2,3].indexOf(5))
      assert.equal(-1, [1,2,3].indexOf(0))
    })
  })
})
```

测试代码形如上面,用到了chai库

+ describe(des,func)方法是一个测试的描述,一般一个describe()描述一个方法或类
+ it(des,func)方法则是一个测试具体的一个分支,一般一个it()描述一个方法的一种可能输入条件
+ mocha支持定义钩子,可以使用的钩子有:

    + before(func)定义某操作之前的操作
    + after(func) 定义某操作之后的操作
    + beforeEach(func)定义块内每个操作之前的操作 
    + afterEach(func) 定义块内每个操作之后的操作
    
+ mocha支持测试自定义操作
    
    + skip(des,func)跳过某测试
    + only(des,func)只进行某操作
    
+ 输出为文档

    可以配合`mochawesome`输出测试结果为美观的文档
    安装:
        npm install mochawesome --save-dev
        
+ 测试配置
    
    mocha默认会找test文件夹下的文件做测试,我们也要在这个文件夹下写配置要使用es6则可以这样写配置`mocha.opts`
    
    ```javascript
    --recursive
    --compilers js:babel-core/register
    --reporter mochawesome

    ```

+ 使用

    项目目录下直接使用`mocha`即可
    
        

# 测试覆盖率

[isparta](https://github.com/douglasduteil/isparta)是es6标准的代码覆盖率工具,用它来做测试覆盖率统计很方便:

安装:

    npm install isparta --save-dev
    
安装完后只要这样用就好了

```shell
./node_modules/.bin/babel-node ./node_modules/.bin/isparta cover --report html ./node_modules/.bin/_mocha 
```


# 性能基准测试

在大型项目中我们有可能会希望通过对比来查看某个功能的不同实现会有怎样不同的表现,这时候就可以使用`Benchmark.js`

安装:

    npm install --save-dev  benchmark
    
使用:

> 例:

我们知道js中字符串相连是有两种方式的:


```javascript
"asdfg"+"hjkl"
```




    'asdfghjkl'




```javascript
"asdfg".concat("hjkl")
```




    'asdfghjkl'



让我么来测测哪个快

待测代码 `strconcat.js`:

```js
export function str_plus(str1,str2) {
    return str1+str2
}
export function str_concat(str1,str2) {
    return str1.concat(str2)
}

```

测试代码`strconcat.benchmark.js`:

```js
import {str_plus,str_concat} from "./strconcat"
import Benchmark from 'benchmark'
let str1 = "asdfg"
let str2 = "hjkl"

var suite = new Benchmark.Suite
// 添加测试
suite
.add('+', function() {
  str_plus(str1,str2)
})
.add('concat', function() {
  str_concat(str1,str2)
})
// 每个测试跑完后，输出信息
.on('cycle', function(event) {
  console.log(String(event.target))
})
.on('complete', function() {
  console.log('Fastest is ' + this.filter('fastest').map('name'))
})
// 这里的 async 不是 mocha 测试那个 async 的意思，这个选项与它的时间计算有关，默认勾上就好了。
.run({ 'async': true })

```

之后再直接用`babel-node`运行即可

# 在交互环境中测试

我们同样可以在`babel-node`或者我们的`jupyter notebook`中做测试


```javascript
function str_plus(str1,str2) {
    return str1+str2
}
function str_concat(str1,str2) {
    return str1.concat(str2)
}
```




    'use strict'




```javascript
import Benchmark from 'benchmark'
let str1 = "asdfg"
let str2 = "hjkl"

var suite = new Benchmark.Suite

try{
    // 添加测试
suite
.add('+', function() {
  str_plus(str1,str2)
})
.add('concat', function() {
  str_concat(str1,str2)
})
// 每个测试跑完后，输出信息
.on('cycle', function(event) {
  console.log(String(event.target))
})
.on('complete', function() {
  console.log('Fastest is ' + this.filter('fastest').map('name'))
})
// 这里的 async 不是 mocha 测试那个 async 的意思，这个选项与它的时间计算有关，默认勾上就好了。
.run({ 'async': true })
} catch(err) {
    console.log(err)
}

```




    Suite {
      '0': 
       Benchmark {
         name: '+',
         options: 
          { async: false,
            defer: false,
            delay: 0.005,
            id: undefined,
            initCount: 1,
            maxTime: 5,
            minSamples: 5,
            minTime: 0.05,
            name: undefined,
            onAbort: undefined,
            onComplete: undefined,
            onCycle: undefined,
            onError: undefined,
            onReset: undefined,
            onStart: undefined },
         async: false,
         defer: false,
         delay: 0.005,
         initCount: 1,
         maxTime: 5,
         minSamples: 5,
         minTime: 0.05,
         id: 3,
         fn: [Function],
         stats: 
          { moe: 0,
            rme: 0,
            sem: 0,
            deviation: 0,
            mean: 0,
            sample: [],
            variance: 0 },
         times: { cycle: 0, elapsed: 0, period: 0, timeStamp: 0 },
         _timerId: 
          { _called: false,
            _idleTimeout: 5,
            _idlePrev: [Object],
            _idleNext: [Object],
            _idleStart: 2085575,
            _onTimeout: [Function],
            _repeat: null } },
      '1': 
       Benchmark {
         name: 'concat',
         options: 
          { async: false,
            defer: false,
            delay: 0.005,
            id: undefined,
            initCount: 1,
            maxTime: 5,
            minSamples: 5,
            minTime: 0.05,
            name: undefined,
            onAbort: undefined,
            onComplete: undefined,
            onCycle: undefined,
            onError: undefined,
            onReset: undefined,
            onStart: undefined },
         async: false,
         defer: false,
         delay: 0.005,
         initCount: 1,
         maxTime: 5,
         minSamples: 5,
         minTime: 0.05,
         id: 4,
         fn: [Function],
         stats: 
          { moe: 0,
            rme: 0,
            sem: 0,
            deviation: 0,
            mean: 0,
            sample: [],
            variance: 0 },
         times: { cycle: 0, elapsed: 0, period: 0, timeStamp: 0 } },
      name: undefined,
      options: { name: undefined },
      length: 2,
      events: { cycle: [ [Function] ], complete: [ [Function] ] },
      running: true }



    + x 72,966,058 ops/sec ±3.10% (71 runs sampled)
    concat x 23,597,976 ops/sec ±2.11% (73 runs sampled)
    Fastest is +


可见其实+运算符还是蛮好
