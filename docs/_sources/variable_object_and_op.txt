
变量,对象与运算
===============

对象
----

Python是典型的面向对象语言,在其中万物皆对象,数是对象,字符串是对象,函数是对象,类是对象,一切都是对象.

    看个例子

.. code:: python

    id(1)




.. parsed-literal::

    4330961024



这些id就是python中的对象id,也可以看做是一块内存

.. code:: python

    a = id("hello")
    a




.. parsed-literal::

    4355774088



.. code:: python

    id(lambda x:x )




.. parsed-literal::

    4355783808



对象间的交互
~~~~~~~~~~~~

对象间往往通过对象内部定义的方法来交互,比如最典型的数学运算

.. code:: python

    1+1




.. parsed-literal::

    2



其中的\ ``+``\ 符号是数对象的一个运算符(一种方法,这个在后面进阶里会有讲解)

不可变对象--整型数,浮点数,复数, 字符串,元组等
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

python中一类数据是不可变的,不可变意味着一旦生成(开辟空间->赋值)就是固定大小值不能改变,最典型的就是字符串了.

.. code:: python

    string = "asdfg"

.. code:: python

    sid1 = id(string)

.. code:: python

    string = string.upper()
    string




.. parsed-literal::

    'ASDFG'



.. code:: python

    sid2 = id(string)

.. code:: python

    sid1 == sid2




.. parsed-literal::

    False



可以看到两个id并不相同,即虽然变量名都是string,但实际指向的并不是同一个空间了

可变对象--列表,字典,集合等
~~~~~~~~~~~~~~~~~~~~~~~~~~

这类是可变数据,拿list来举例:

.. code:: python

    l = [1,2,3]

.. code:: python

    l




.. parsed-literal::

    [1, 2, 3]



.. code:: python

    id(l)




.. parsed-literal::

    4553239560



.. code:: python

    l.append(4)

.. code:: python

    l




.. parsed-literal::

    [1, 2, 3, 4]



.. code:: python

    id(l)




.. parsed-literal::

    4553239560



可见虽然内部改变了,但实际指向的空间并没有变.

这些字符串,元祖,列表,字典等可以装下独立内容的结构化数据统称为容器,这里不深入讲解他们的内部,下一节将会详细研究.

变量
----

python是动态强类型语言，这就意味着变量不用提前定义类型，而不同类型变量也不能混杂操作。
不过不像c这样必须先声明后赋值,python在变量被赋值后会根据赋值确定类型,因此写起来很方便.

本文只对变量部分常用方法和特殊用法做简单介绍,不会深入到过于细节,
变量的具体方法可以用\ ``help()``\ 函数查看,不会具体阐述.

关于变量的运作机制
~~~~~~~~~~~~~~~~~~

python中的变量只是对对象的引用

假设定义一个变量a:

.. code:: python

    a = 1

这意味着python会为你的1开辟一个空间(可以用\ ``id()``\ 查看)然后用a来指向这个空间.
因此,如果你将a重新赋值,在用\ ``id()``\ 查看你会发现id号改变了.这是因为python并没有改变原本内容为1的空间中的值,
而是重新开辟了一个空间,放入新的值,然后将变量名字a修改为指向了新的值的空间.之后由于原本内容为1的空间没有指向它的变量名了,
利用python的垃圾回收机制,原本内容为1空间将会被python回收.

.. code:: python

    id(a)




.. parsed-literal::

    4528207840



.. code:: python

    a = "1"

.. code:: python

    id(a)




.. parsed-literal::

    4532956944



因为这一性质,当你有两个变量指向同一个值的地址时,只要对其中一个变量进行了修改,那另一个也会改变.

.. code:: python

    i=[1,2,3]

.. code:: python

    j=i

.. code:: python

    i is j




.. parsed-literal::

    True



特例
~~~~

在python内部有对小内存对象的优化,比如一个小整型数,无论声明多少次它的id都不变,而对于浮点数这种占用大内存的则每次都是一个新对象

.. code:: python

    int_a = 1

.. code:: python

    int_b = 1

.. code:: python

    float_a = 1.001

.. code:: python

    float_b = 1.001

.. code:: python

    int_a is int_b




.. parsed-literal::

    True



.. code:: python

    float_a is float_b




.. parsed-literal::

    False



数(整型数，浮点数，复数)及其运算符
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

整型相当于C里面的int了,浮点数相当于double,复数就是\ ``a+bj``\ 这种.
复数有两个属性--{real:实部,imag:虚部}以及一个方法--{conjugat():返回该复数的共轭复数}
这3种可以混合计算所以放一起讲.\ **在python2中整型和整型运算结果依然是整型,整型和浮点型运算结果才是浮点型.
而在python3中整型和整型做除运算结果可以是浮点数了.**

    数值计算运算符

+--------+----------------------------+
| 符号   | 功能                       |
+========+============================+
| +      | 加号                       |
+--------+----------------------------+
| -      | 减号                       |
+--------+----------------------------+
| \*     | 乘号                       |
+--------+----------------------------+
| /      | 除号                       |
+--------+----------------------------+
| //     | 地板除--结果去掉小数部分   |
+--------+----------------------------+
| %      | 取余                       |
+--------+----------------------------+
| \*\*   | 乘方(幂)                   |
+--------+----------------------------+

    进制运算

定义一个X进制数 int("num",X)

整型书转X进制输出:

+------------+------------------+
| 符号       | 功能             |
+============+==================+
| bin(num)   | 10进制转2进制    |
+------------+------------------+
| hex(num)   | 10进制转16进制   |
+------------+------------------+
| oct(num)   | 10进制转8进制    |
+------------+------------------+

    位运算(只能针对整形数)

+---------------+--------------------------+
| 符号          | 功能                     |
+===============+==========================+
| ~num          | 取每一位的反(-(num+1))   |
+---------------+--------------------------+
| num<>a        | 右移a位(2进制)           |
+---------------+--------------------------+
| num1 &num2    | 安位求与                 |
+---------------+--------------------------+
| num1 ^ num2   | 异或                     |
+---------------+--------------------------+
| num1Inum2     | 安位或                   |
+---------------+--------------------------+

布尔值和逻辑运算符
~~~~~~~~~~~~~~~~~~

就是 ``True``\ 和\ ``False``
数字0，空的字符串，列表，元组，字典，集合也是False，其他都算True

    逻辑运算符

+--------+--------+
| 符号   | 功能   |
+========+========+
| and    | 与     |
+--------+--------+
| or     | 或     |
+--------+--------+
| not    | 非     |
+--------+--------+

    比较表达式

+--------+------------+
| 符号   | 功能       |
+========+============+
| >      | 大于       |
+--------+------------+
| >=     | 大于等于   |
+--------+------------+
| <      | 小于       |
+--------+------------+
| <=     | 小于等于   |
+--------+------------+
| ==     | 等于       |
+--------+------------+
| !=     | 不等于     |
+--------+------------+

**练习:**
~~~~~~~~~

计算0xA73F与0x4893每位异或后所得结果除以3所得整数解和真实解

.. code:: python

    plus = int("A73F",16)^int("4893",16)

.. code:: python

    plus/3




.. parsed-literal::

    20452.0



.. code:: python

    plus//3




.. parsed-literal::

    20452



**注:**\ python2和python3在除法上有很大不同,python2的\ ``/``\ 相当于python3的\ ``//``,而python3的\ ``x/y``\ 相当于python2的\ ``float(x)/y``
