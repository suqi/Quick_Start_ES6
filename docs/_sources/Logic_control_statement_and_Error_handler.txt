
控制语句和异常处理
==================

python的控制语句力求精简,所以只有判断语句，循环语句，异常处理语句三种。

python的语法以缩进代表代码段,因此需要注意对缩进的理解,
相同的代码,缩进不同可能意义完全不同.这也是许多学过其他语言的人难以适应python的原因之一,
但一旦接受了这种设定,其实还是很带感的.

判断语句
--------

python只有if语句没有switch,这也是与c与java最大的区别之一. ###
if...elif...else > 例1.判断一个数是奇数还是偶数

.. code:: python

    a = int(input("输入一个整数"))
    if a%2 == 0:
        print("偶数")
    else:
        print("奇数")


.. parsed-literal::

    输入一个整数12
    偶数


    例2:不同缩进的不同效果,例子为计算一个整数是不是3,5,15的倍数

正确一:

.. code:: python

    a = int(input("输入一个整数"))
    if a%3 == 0:  
        if a%5 == 0:
            print("15的倍数")
        else:
            print("3的倍数")
    elif a%5 == 0:
        print("5的倍数")
    
    else:
        print("不是3或5的倍数")



.. parsed-literal::

    输入一个整数34
    不是3或5的倍数


正确二:

.. code:: python

    a = int(input("输入一个整数"))
    if a%15 == 0:
        print("15的倍数")
    elif a%3 == 0:
        print("3的倍数")
    elif a%5 == 0:
        print("5的倍数")
    else:
        print("不是3或5的倍数")


.. parsed-literal::

    输入一个整数34
    不是3或5的倍数


实现分支swtch的功能
~~~~~~~~~~~~~~~~~~~

大道至简,话是这么说,但如果纯用if...else来实现switch其实很繁琐并不优雅,有没有什么办法可以实现优雅高效的switch操作呢?有的,就是用字典+lambda函数

判断一个变量的类型,是

.. code:: python

    def which_type(x):
        values = {
            int:lambda x:print(x,"is int"),
            float:lambda x:print(x,"is float"),
            list:lambda x:print(x,"is list")
        }
        return values.get(type(x),lambda x:print("i dont know"))(x)

.. code:: python

    which_type(10)


.. parsed-literal::

    10 is int


.. code:: python

    which_type("10")


.. parsed-literal::

    i dont know


循环语句
--------

和C和Java一样,python有for循环和while循环

for循环
~~~~~~~

for循环一般是用来遍历一个序列变量或无序序列变量

    例子:

.. code:: python

    for i in range(10):
        print(i)


.. parsed-literal::

    0
    1
    2
    3
    4
    5
    6
    7
    8
    9


while循环
~~~~~~~~~

    例:

.. code:: python

    i = 0
    while i<10:
        print(i)
        i+=1


.. parsed-literal::

    0
    1
    2
    3
    4
    5
    6
    7
    8
    9


打断语句\ ``break``\ 和\ ``continue``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    例:

::

    i = 0
    while True:
        i += 1
        if i > 10 :
            break
        if i % 2 == 0 :
            continue
        print(i)

.. code:: python

    i = 0
    while True:
        i += 1
        if i > 10 :
            break
        if i % 2 == 0 :
            continue
        print(i)


.. parsed-literal::

    1
    3
    5
    7
    9


循环+else
~~~~~~~~~

你可能不相信,但这是真的...
for循环和while循环都有else分支,它的语义是如果正常跳出,则进入else分支,否则跳过
> 例子

.. code:: python

    for i in range(100):
        if i > 50:
            break
    else:
        print("正常跳出")

.. code:: python

    for i in range(20):
        if i > 50:
            break
    else:
        print("正常跳出")


.. parsed-literal::

    正常跳出


.. code:: python

    for i in range(20):
        if i > 50:
            break
        else:
            continue
    else:
        print("正常跳出")


.. parsed-literal::

    正常跳出


异常处理语句
------------

    什么是异常？

异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。
一般情况下，在Python无法正常处理程序时就会发生一个异常。
异常是Python对象，表示一个错误。
当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。

    python标准异常

+-----------------------------+------------------------------------------------------+
| 异常名称                    | 描述                                                 |
+=============================+======================================================+
| BaseException               | 所有异常的基类                                       |
+-----------------------------+------------------------------------------------------+
| SystemExit                  | 解释器请求退出                                       |
+-----------------------------+------------------------------------------------------+
| KeyboardInterrupt           | 用户中断执行(通常是输入^C)                           |
+-----------------------------+------------------------------------------------------+
| Exception                   | 常规错误的基类                                       |
+-----------------------------+------------------------------------------------------+
| StopIteration               | 迭代器没有更多的值                                   |
+-----------------------------+------------------------------------------------------+
| GeneratorExit               | 生成器(generator)发生异常来通知退出                  |
+-----------------------------+------------------------------------------------------+
| StandardError               | 所有的内建标准异常的基类                             |
+-----------------------------+------------------------------------------------------+
| ArithmeticError             | 所有数值计算错误的基类                               |
+-----------------------------+------------------------------------------------------+
| FloatingPointError          | 浮点计算错误                                         |
+-----------------------------+------------------------------------------------------+
| OverflowError               | 数值运算超出最大限制                                 |
+-----------------------------+------------------------------------------------------+
| ZeroDivisionError           | 除(或取模)零 (所有数据类型)                          |
+-----------------------------+------------------------------------------------------+
| AssertionError              | 断言语句失败                                         |
+-----------------------------+------------------------------------------------------+
| AttributeError              | 对象没有这个属性                                     |
+-----------------------------+------------------------------------------------------+
| EOFError                    | 没有内建输入,到达EOF 标记                            |
+-----------------------------+------------------------------------------------------+
| EnvironmentError            | 操作系统错误的基类                                   |
+-----------------------------+------------------------------------------------------+
| IOError                     | 输入/输出操作失败                                    |
+-----------------------------+------------------------------------------------------+
| OSError                     | 操作系统错误                                         |
+-----------------------------+------------------------------------------------------+
| WindowsError                | 系统调用失败                                         |
+-----------------------------+------------------------------------------------------+
| ImportError                 | 导入模块/对象失败                                    |
+-----------------------------+------------------------------------------------------+
| LookupError                 | 无效数据查询的基类                                   |
+-----------------------------+------------------------------------------------------+
| IndexError                  | 序列中没有此索引(index)                              |
+-----------------------------+------------------------------------------------------+
| KeyError                    | 映射中没有这个键                                     |
+-----------------------------+------------------------------------------------------+
| MemoryError                 | 内存溢出错误(对于Python 解释器不是致命的)            |
+-----------------------------+------------------------------------------------------+
| NameError                   | 未声明/初始化对象 (没有属性)                         |
+-----------------------------+------------------------------------------------------+
| UnboundLocalError           | 访问未初始化的本地变量                               |
+-----------------------------+------------------------------------------------------+
| ReferenceError              | 弱引用(Weak reference)试图访问已经垃圾回收了的对象   |
+-----------------------------+------------------------------------------------------+
| RuntimeError                | 一般的运行时错误                                     |
+-----------------------------+------------------------------------------------------+
| NotImplementedError         | 尚未实现的方法                                       |
+-----------------------------+------------------------------------------------------+
| SyntaxError                 | Python 语法错误                                      |
+-----------------------------+------------------------------------------------------+
| IndentationError            | 缩进错误                                             |
+-----------------------------+------------------------------------------------------+
| TabError                    | Tab 和空格混用                                       |
+-----------------------------+------------------------------------------------------+
| SystemError                 | 一般的解释器系统错误                                 |
+-----------------------------+------------------------------------------------------+
| TypeError                   | 对类型无效的操作                                     |
+-----------------------------+------------------------------------------------------+
| ValueError                  | 传入无效的参数                                       |
+-----------------------------+------------------------------------------------------+
| UnicodeError                | Unicode 相关的错误                                   |
+-----------------------------+------------------------------------------------------+
| UnicodeDecodeError          | Unicode 解码时的错误                                 |
+-----------------------------+------------------------------------------------------+
| UnicodeEncodeError          | Unicode 编码时错误                                   |
+-----------------------------+------------------------------------------------------+
| UnicodeTranslateError       | Unicode 转换时错误                                   |
+-----------------------------+------------------------------------------------------+
| Warning                     | 警告的基类                                           |
+-----------------------------+------------------------------------------------------+
| DeprecationWarning          | 关于被弃用的特征的警告                               |
+-----------------------------+------------------------------------------------------+
| FutureWarning               | 关于构造将来语义会有改变的警告                       |
+-----------------------------+------------------------------------------------------+
| OverflowWarning             | 旧的关于自动提升为长整型(long)的警告                 |
+-----------------------------+------------------------------------------------------+
| PendingDeprecationWarning   | 关于特性将会被废弃的警告                             |
+-----------------------------+------------------------------------------------------+
| RuntimeWarning              | 可疑的运行时行为(runtime behavior)的警告             |
+-----------------------------+------------------------------------------------------+
| SyntaxWarning               | 可疑的语法的警告                                     |
+-----------------------------+------------------------------------------------------+
| UserWarning                 | 用户代码生成的警告                                   |
+-----------------------------+------------------------------------------------------+

python提供了两个非常重要的功能来处理python程序在运行中出现的异常和错误。你可以使用该功能来调试python程序。
+ 异常处理。 + 断言(Assertions)

异常处理
~~~~~~~~

    捕捉异常可以使用try/except语句。

try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理。
如果你不想在异常发生时结束你的程序，只需在try里捕获它。

::

    try:
        <语句>        #运行别的代码
    except <名字>：
        <语句>        #如果在try部份引发了'name'异常
    except <名字>，<数据>:
        <语句>        #如果引发了'name'异常，获得附加的数据
    else:
        <语句>        #如果没有异常发生
    finally:
        <语句>    #退出try时总会执行
        

try的工作原理是，当开始一个try语句后，python就在当前程序的上下文中作标记，这样当异常出现时就可以回到这里，try子句先执行，接下来会发生什么依赖于执行时是否出现异常。

-  如果当try后的语句执行时发生异常，python就跳回到try并执行第一个匹配该异常的except子句，异常处理完毕，控制流就通过整个try语句（除非在处理异常时又引发新的异常）。
-  如果在try后的语句里发生了异常，却没有匹配的except子句，异常将被递交到上层的try，或者到程序的最上层（这样将结束程序，并打印缺省的出错信息）。
-  如果在try子句执行时没有发生异常，python将执行else语句后的语句（如果有else的话），然后控制流通过整个try语句。
-  无论是否有异常,finally都将被执行,它一般作为存放收尾动作的地方,但是注意,finally有陷阱:
   如果主干上的错误分支中没有对应的捕捉,那么他将被保存在一个临时的位置,而如果同时finally中有错误,则这个临时的错误会被finally中的错误给替代

    触发异常

我们可以使用raise语句自己触发异常 raise语法格式如下：

::

    raise [Exception [, args [, traceback]]]

    例子:

.. code:: python

    def functionName( level ):
        if level < 1:
            raise ValueError("Invalid level! "+str(level))
        else:
            print("ok")


.. code:: python

    functionName(2)


.. parsed-literal::

    ok


.. code:: python

    functionName(0)


::


    ---------------------------------------------------------------------------

    ValueError                                Traceback (most recent call last)

    <ipython-input-10-385485286317> in <module>()
    ----> 1 functionName(0)
    

    <ipython-input-8-c7aff5bd58d1> in functionName(level)
          1 def functionName( level ):
          2     if level < 1:
    ----> 3         raise ValueError("Invalid level! "+str(level))
          4     else:
          5         print("ok")


    ValueError: Invalid level! 0


**注意:**\ 这块是和python2不同的地方之一,raise再python2中这么用:

::

    raise Exception,args

    用户自定义异常

通过创建一个新的异常类，程序可以命名它们自己的异常。异常应该是典型的继承自Exception类，通过直接或间接的方式。
以下为与RuntimeError相关的实例,实例中创建了一个类，基类为RuntimeError，用于在异常触发时输出更多的信息。
在try语句块中，用户自定义的异常后执行except块语句，变量 e
是用于创建Networkerror类的实例。

::

    class Networkerror(RuntimeError):
        def __init__(self, arg):
            self.args = arg

在你定义以上类后，你可以触发该异常，如下所示：

::

    try:
        raise Networkerror("Bad hostname")
    except Networkerror as e:
        print(e.args)

**注意:**\ 这块和python2中也不一样,python2中except这样用:

::

    except NotImplementedError, error:

    断言

assert语句用来断言某个条件是真的，并且在它非真的时候引发一个错误--AssertionError。

.. code:: python

    flag = True
    
    assert flag == True

.. code:: python

    assert flag == False


::


    ---------------------------------------------------------------------------

    AssertionError                            Traceback (most recent call last)

    <ipython-input-13-64df29166d12> in <module>()
    ----> 1 assert flag == False
    

    AssertionError: 


.. code:: python

    try:
        assert flag == False
    except AssertionError as err:
        print("failed")
    else:
        print("pass")


.. parsed-literal::

    failed

